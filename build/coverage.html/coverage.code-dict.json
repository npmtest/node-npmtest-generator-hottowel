{"/home/travis/build/npmtest/node-npmtest-generator-hottowel/test.js":"/* istanbul instrument in package npmtest_generator_hottowel */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-hottowel/lib.npmtest_generator_hottowel.js":"/* istanbul instrument in package npmtest_generator_hottowel */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_generator_hottowel = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_generator_hottowel = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-hottowel/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-generator-hottowel && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_generator_hottowel */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_generator_hottowel\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_generator_hottowel.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_generator_hottowel.rollup.js'] =\n            local.assetsDict['/assets.npmtest_generator_hottowel.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_generator_hottowel.__dirname + '/lib.npmtest_generator_hottowel.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-hottowel/node_modules/generator-hottowel/app/index.js":"'use strict';\nvar util = require('util');\nvar path = require('path');\nvar yeoman = require('yeoman-generator');\nvar yosay = require('yosay');\nvar chalk = require('chalk');\nvar _ = require('lodash');\nvar str = require('underscore.string');\n_.mixin(str);\n\nvar HotTowelGenerator = yeoman.Base.extend({\n\n  constructor: function() {\n    // arguments and options should be\n    // defined in the constructor.\n    yeoman.Base.apply(this, arguments);\n\n    this.argument('appName', { type: String, required: false });\n    this.appName = _.camelize(_.slugify(_.humanize(this.appName)));\n  },\n\n  welcome: function() {\n    this.log(yosay(\n      'Welcome to the HotTowel AngularJS generator!'\n    ));\n  },\n\n  prompting: function() {\n    // If we passed in the app name, don't prompt the user for it\n    if (this.appName) {\n      return;\n    }\n\n    var done = this.async();\n\n    var prompts = [{\n      type: 'input',\n      name: 'appName',\n      message: 'What would you like to name the app?',\n      default: this.appName || path.basename(process.cwd())\n    }];\n\n    this.prompt(prompts, function(answers) {\n      this.appName = answers.appName;\n      this.appName = this.appName || 'hottowel'; //path.basename(process.cwd());\n      done();\n    }.bind(this));\n  },\n\n  displayName: function() {\n    this.log('Creating ' + this.appName + ' app based on HotTowel.');\n  },\n\n  packageFiles: function() {\n    var context = {\n      appName: this.appName\n    };\n\n    this.copy('_package.json', 'package.json');\n    this.template('_bower.json', 'bower.json');\n    this.template('_gulpfile.js', 'gulpfile.js');\n    this.template('_gulp.config.js', 'gulp.config.js');\n    this.template('_protractor.config.js', 'protractor.config.js');\n    this.template('_karma.conf.js', 'karma.conf.js');\n    this.template('_README.md', 'README.md');\n  },\n\n  assets: function() {\n    this.copy('gulp.png', 'gulp.png');\n  },\n\n  testRunnerFiles: function() {\n    this.template('src/client/_specs.html', 'src/client/specs.html');\n  },\n\n  appFiles: function() {\n    this.directory('src/client/app');\n    this.directory('src/client/images');\n    this.directory('src/client/styles');\n    this.directory('src/client/test');\n    this.directory('src/client/test-helpers');\n\n    this.template('src/client/_index.html', 'src/client/index.html');\n\n    this.template('src/server/_app.js', 'src/server/app.js');\n    this.template('src/server/_data.js', 'src/server/data.js');\n    this.template('src/server/_routes.js', 'src/server/routes.js');\n    this.directory('src/server/utils');\n    this.copy('src/server/favicon.ico');\n  },\n\n  projectfiles: function() {\n    this.copy('editorconfig', '.editorconfig');\n    this.copy('jshintrc', '.jshintrc');\n    this.copy('jscsrc', '.jscsrc');\n    this.copy('bowerrc', '.bowerrc');\n    this.copy('gitignore', '.gitignore');\n  },\n\n  runNpm: function() {\n    //        var done = this.async();\n    //        this.npmInstall('', function () {\n    //            console.log('\\nEverything Setup!\\n');\n    //            done();\n    //        });\n    this.npmInstall();\n    //              this.bowerInstall();\n    console.log('\\nEverything Setup !!!\\n');\n  },\n\n  end: function() {\n    //        this.installDependencies();\n  }\n});\n\nmodule.exports = HotTowelGenerator;\n","/home/travis/build/npmtest/node-npmtest-generator-hottowel/node_modules/generator-hottowel/app/templates/_gulp.config.js":"module.exports = function() {\n  var client = './src/client/';\n  var server = './src/server/';\n  var clientApp = client + 'app/';\n  var report = './report/';\n  var root = './';\n  var specRunnerFile = 'specs.html';\n  var temp = './.tmp/';\n  var wiredep = require('wiredep');\n  var bowerFiles = wiredep({ devDependencies: true })['js'];\n  var bower = {\n    json: require('./bower.json'),\n    directory: './bower_components/',\n    ignorePath: '../..'\n  };\n  var nodeModules = 'node_modules';\n\n  var config = {\n    /**\n     * File paths\n     */\n    // all javascript that we want to vet\n    alljs: [\n      './src/**/*.js',\n      './*.js'\n    ],\n    build: './build/',\n    client: client,\n    css: temp + 'styles.css',\n    fonts: bower.directory + 'font-awesome/fonts/**/*.*',\n    html: client + '**/*.html',\n    htmltemplates: clientApp + '**/*.html',\n    images: client + 'images/**/*.*',\n    index: client + 'index.html',\n    // app js, with no specs\n    js: [\n      clientApp + '**/*.module.js',\n      clientApp + '**/*.js',\n      '!' + clientApp + '**/*.spec.js'\n    ],\n    jsOrder: [\n      '**/app.module.js',\n      '**/*.module.js',\n      '**/*.js'\n    ],\n    less: client + 'styles/styles.less',\n    report: report,\n    root: root,\n    server: server,\n    source: 'src/',\n    stubsjs: [\n      bower.directory + 'angular-mocks/angular-mocks.js',\n      client + 'stubs/**/*.js'\n    ],\n    temp: temp,\n\n    /**\n     * optimized files\n     */\n    optimized: {\n      app: 'app.js',\n      lib: 'lib.js'\n    },\n\n    /**\n     * plato\n     */\n    plato: { js: clientApp + '**/*.js' },\n\n    /**\n     * browser sync\n     */\n    browserReloadDelay: 1000,\n\n    /**\n     * template cache\n     */\n    templateCache: {\n      file: 'templates.js',\n      options: {\n        module: 'app.core',\n        root: 'app/',\n        standalone: false\n      }\n    },\n\n    /**\n     * Bower and NPM files\n     */\n    bower: bower,\n    packages: [\n      './package.json',\n      './bower.json'\n    ],\n\n    /**\n     * specs.html, our HTML spec runner\n     */\n    specRunner: client + specRunnerFile,\n    specRunnerFile: specRunnerFile,\n\n    /**\n     * The sequence of the injections into specs.html:\n     *  1 testlibraries\n     *      mocha setup\n     *  2 bower\n     *  3 js\n     *  4 spechelpers\n     *  5 specs\n     *  6 templates\n     */\n    testlibraries: [\n      nodeModules + '/mocha/mocha.js',\n      nodeModules + '/chai/chai.js',\n      nodeModules + '/sinon-chai/lib/sinon-chai.js'\n    ],\n    specHelpers: [client + 'test-helpers/*.js'],\n    specs: [clientApp + '**/*.spec.js'],\n    serverIntegrationSpecs: [client + '/tests/server-integration/**/*.spec.js'],\n    /**\n     * E2E Scenario Files\n     */\n    scenarios: client + '/test/e2e/**/*.spec.js',\n\n    /**\n     * Node settings\n     */\n    nodeServer: server + 'app.js',\n    defaultPort: '8001'\n  };\n\n  /**\n   * wiredep and bower settings\n   */\n  config.getWiredepDefaultOptions = function() {\n    var options = {\n      bowerJson: config.bower.json,\n      directory: config.bower.directory,\n      ignorePath: config.bower.ignorePath\n    };\n    return options;\n  };\n\n  /**\n   * karma settings\n   */\n  config.karma = getKarmaOptions();\n\n  return config;\n\n  ////////////////\n\n  function getKarmaOptions() {\n    var options = {\n      files: [].concat(\n        bowerFiles,\n        config.specHelpers,\n        clientApp + '**/*.module.js',\n        clientApp + '**/*.js',\n        temp + config.templateCache.file,\n        config.serverIntegrationSpecs\n      ),\n      exclude: [],\n      coverage: {\n        dir: report + 'coverage',\n        reporters: [\n          // reporters not supporting the `file` property\n          { type: 'html', subdir: 'report-html' },\n          { type: 'lcov', subdir: 'report-lcov' },\n          { type: 'text-summary' } //, subdir: '.', file: 'text-summary.txt'}\n        ]\n      },\n      preprocessors: {}\n    };\n    options.preprocessors[clientApp + '**/!(*.spec)+(.js)'] = ['coverage'];\n    return options;\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-generator-hottowel/node_modules/generator-hottowel/app/templates/_gulpfile.js":"var args = require('yargs').argv;\nvar browserSync = require('browser-sync');\nvar config = require('./gulp.config')();\nvar del = require('del');\nvar glob = require('glob');\nvar gulp = require('gulp');\nvar path = require('path');\nvar _ = require('lodash');\nvar $ = require('gulp-load-plugins')({ lazy: true });\nvar protractor = $.protractor.protractor;\n\nvar colors = $.util.colors;\nvar envenv = $.util.env;\nvar port = process.env.PORT || config.defaultPort;\n\n/**\n * yargs variables can be passed in to alter the behavior, when present.\n * Example: gulp serve-dev\n *\n * --verbose  : Various tasks will produce more output to the console.\n * --nosync   : Don't launch the browser with browser-sync when serving code.\n * --debug    : Launch debugger with node-inspector.\n * --debug-brk: Launch debugger and break on 1st line with node-inspector.\n * --startServers: Will start servers for midway tests on the test task.\n */\n\n/**\n * List the available gulp tasks\n */\ngulp.task('help', $.taskListing);\ngulp.task('default', ['help']);\n\n/**\n * vet the code and create coverage report\n * @return {Stream}\n */\ngulp.task('vet', function() {\n  log('Analyzing source with JSHint and JSCS');\n\n  return gulp\n    .src(config.alljs)\n    .pipe($.if(args.verbose, $.print()))\n    .pipe($.jshint())\n    .pipe($.jshint.reporter('jshint-stylish', { verbose: true }))\n    .pipe($.jshint.reporter('fail'))\n    .pipe($.jscs());\n});\n\n/**\n * Create a visualizer report\n */\ngulp.task('plato', function(done) {\n  log('Analyzing source with Plato');\n  log('Browse to /report/plato/index.html to see Plato results');\n\n  startPlatoVisualizer(done);\n});\n\n/**\n * Compile less to css\n * @return {Stream}\n */\ngulp.task('styles', ['clean-styles'], function() {\n  log('Compiling Less --> CSS');\n\n  return gulp\n    .src(config.less)\n    .pipe($.plumber()) // exit gracefully if something fails after this\n    .pipe($.less())\n    //        .on('error', errorLogger) // more verbose and dupe output. requires emit.\n    .pipe($.autoprefixer({ browsers: ['last 2 version', '> 5%'] }))\n    .pipe(gulp.dest(config.temp));\n});\n\n/**\n * Copy fonts\n * @return {Stream}\n */\ngulp.task('fonts', ['clean-fonts'], function() {\n  log('Copying fonts');\n\n  return gulp\n    .src(config.fonts)\n    .pipe(gulp.dest(config.build + 'fonts'));\n});\n\n/**\n * Compress images\n * @return {Stream}\n */\ngulp.task('images', ['clean-images'], function() {\n  log('Compressing and copying images');\n\n  return gulp\n    .src(config.images)\n    .pipe($.imagemin({ optimizationLevel: 4 }))\n    .pipe(gulp.dest(config.build + 'images'));\n});\n\ngulp.task('less-watcher', function() {\n  gulp.watch([config.less], ['styles']);\n});\n\n/**\n * Create $templateCache from the html templates\n * @return {Stream}\n */\ngulp.task('templatecache', ['clean-code'], function() {\n  log('Creating an AngularJS $templateCache');\n\n  return gulp\n    .src(config.htmltemplates)\n    .pipe($.if(args.verbose, $.bytediff.start()))\n    .pipe($.minifyHtml({ empty: true }))\n    .pipe($.if(args.verbose, $.bytediff.stop(bytediffFormatter)))\n    .pipe($.angularTemplatecache(\n      config.templateCache.file,\n      config.templateCache.options\n    ))\n    .pipe(gulp.dest(config.temp));\n});\n\n/**\n * Wire-up the bower dependencies\n * @return {Stream}\n */\ngulp.task('wiredep', function() {\n  log('Wiring the bower dependencies into the html');\n\n  var wiredep = require('wiredep').stream;\n  var options = config.getWiredepDefaultOptions();\n\n  // Only include stubs if flag is enabled\n  var js = args.stubs ? [].concat(config.js, config.stubsjs) : config.js;\n\n  return gulp\n    .src(config.index)\n    .pipe(wiredep(options))\n    .pipe(inject(js, '', config.jsOrder))\n    .pipe(gulp.dest(config.client));\n});\n\ngulp.task('inject', ['wiredep', 'styles', 'templatecache'], function() {\n  log('Wire up css into the html, after files are ready');\n\n  return gulp\n    .src(config.index)\n    .pipe(inject(config.css))\n    .pipe(gulp.dest(config.client));\n});\n\n/**\n * Run the spec runner\n * @return {Stream}\n */\ngulp.task('serve-specs', ['build-specs'], function(done) {\n  log('run the spec runner');\n  serve(true /* isDev */, true /* specRunner */);\n  done();\n});\n\n/**\n * Inject all the spec files into the specs.html\n * @return {Stream}\n */\ngulp.task('build-specs', ['templatecache'], function(done) {\n  log('building the spec runner');\n\n  var wiredep = require('wiredep').stream;\n  var templateCache = config.temp + config.templateCache.file;\n  var options = config.getWiredepDefaultOptions();\n  var specs = config.specs;\n\n  if (args.startServers) {\n    specs = [].concat(specs, config.serverIntegrationSpecs);\n  }\n  options.devDependencies = true;\n\n  return gulp\n    .src(config.specRunner)\n    .pipe(wiredep(options))\n    .pipe(inject(config.js, '', config.jsOrder))\n    .pipe(inject(config.testlibraries, 'testlibraries'))\n    .pipe(inject(config.specHelpers, 'spechelpers'))\n    .pipe(inject(specs, 'specs', ['**/*']))\n    .pipe(inject(templateCache, 'templates'))\n    .pipe(gulp.dest(config.client));\n});\n\n/**\n * Build everything\n * This is separate so we can run tests on\n * optimize before handling image or fonts\n */\ngulp.task('build', ['optimize', 'images', 'fonts'], function() {\n  log('Building everything');\n\n  var msg = {\n    title: 'gulp build',\n    subtitle: 'Deployed to the build folder',\n    message: 'Running `gulp serve-build`'\n  };\n  del(config.temp);\n  log(msg);\n  notify(msg);\n});\n\n/**\n * Optimize all files, move to a build folder,\n * and inject them into the new index.html\n * @return {Stream}\n */\ngulp.task('optimize', ['inject', 'test'], function() {\n  log('Optimizing the js, css, and html');\n\n  var assets = $.useref.assets({ searchPath: './' });\n  // Filters are named for the gulp-useref path\n  var cssFilter = $.filter('**/*.css');\n  var jsAppFilter = $.filter('**/' + config.optimized.app);\n  var jslibFilter = $.filter('**/' + config.optimized.lib);\n\n  var templateCache = config.temp + config.templateCache.file;\n\n  return gulp\n    .src(config.index)\n    .pipe($.plumber())\n    .pipe(inject(templateCache, 'templates'))\n    .pipe(assets) // Gather all assets from the html with useref\n    // Get the css\n    .pipe(cssFilter)\n    .pipe($.minifyCss())\n    .pipe(cssFilter.restore())\n    // Get the custom javascript\n    .pipe(jsAppFilter)\n    .pipe($.ngAnnotate({ add: true }))\n    .pipe($.uglify())\n    .pipe(getHeader())\n    .pipe(jsAppFilter.restore())\n    // Get the vendor javascript\n    .pipe(jslibFilter)\n    .pipe($.uglify()) // another option is to override wiredep to use min files\n    .pipe(jslibFilter.restore())\n    // Take inventory of the file names for future rev numbers\n    .pipe($.rev())\n    // Apply the concat and file replacement with useref\n    .pipe(assets.restore())\n    .pipe($.useref())\n    // Replace the file names in the html with rev numbers\n    .pipe($.revReplace())\n    .pipe(gulp.dest(config.build));\n});\n\n/**\n * Remove all files from the build, temp, and reports folders\n * @param  {Function} done - callback when complete\n */\ngulp.task('clean', function(done) {\n  var delconfig = [].concat(config.build, config.temp, config.report);\n  log('Cleaning: ' + $.util.colors.blue(delconfig));\n  del(delconfig, done);\n});\n\n/**\n * Remove all fonts from the build folder\n * @param  {Function} done - callback when complete\n */\ngulp.task('clean-fonts', function(done) {\n  clean(config.build + 'fonts/**/*.*', done);\n});\n\n/**\n * Remove all images from the build folder\n * @param  {Function} done - callback when complete\n */\ngulp.task('clean-images', function(done) {\n  clean(config.build + 'images/**/*.*', done);\n});\n\n/**\n * Remove all styles from the build and temp folders\n * @param  {Function} done - callback when complete\n */\ngulp.task('clean-styles', function(done) {\n  var files = [].concat(\n    config.temp + '**/*.css',\n    config.build + 'styles/**/*.css'\n  );\n  clean(files, done);\n});\n\n/**\n * Remove all js and html from the build and temp folders\n * @param  {Function} done - callback when complete\n */\ngulp.task('clean-code', function(done) {\n  var files = [].concat(\n    config.temp + '**/*.js',\n    config.build + 'js/**/*.js',\n    config.build + '**/*.html'\n  );\n  clean(files, done);\n});\n\n/**\n * Run specs once and exit\n * To start servers and run midway specs as well:\n *    gulp test --startServers\n * @return {Stream}\n */\ngulp.task('test', ['vet', 'templatecache'], function(done) {\n  startTests(true /*singleRun*/, done);\n});\n\n/**\n * Runs the e2e specs using protractor.\n */\n// gulp.task('e2e', ['vet'], function(done) {\n//   runProtractor(done);\n// });\n\n/**\n * Run specs and wait.\n * Watch for file changes and re-run tests on each change\n * To start servers and run midway specs as well:\n *    gulp autotest --startServers\n */\ngulp.task('autotest', function(done) {\n  startTests(false /*singleRun*/, done);\n});\n\n/**\n * serve the dev environment\n * --debug-brk or --debug\n * --nosync\n */\ngulp.task('serve-dev', ['inject'], function() {\n  serve(true /*isDev*/);\n});\n\n/**\n * serve the build environment\n * --debug-brk or --debug\n * --nosync\n */\ngulp.task('serve-build', ['build'], function() {\n  serve(false /*isDev*/);\n});\n\n/**\n * Bump the version\n * --type=pre will bump the prerelease version *.*.*-x\n * --type=patch or no flag will bump the patch version *.*.x\n * --type=minor will bump the minor version *.x.*\n * --type=major will bump the major version x.*.*\n * --version=1.2.3 will bump to a specific version and ignore other flags\n */\ngulp.task('bump', function() {\n  var msg = 'Bumping versions';\n  var type = args.type;\n  var version = args.ver;\n  var options = {};\n  if (version) {\n    options.version = version;\n    msg += ' to ' + version;\n  } else {\n    options.type = type;\n    msg += ' for a ' + type;\n  }\n  log(msg);\n\n  return gulp\n    .src(config.packages)\n    .pipe($.print())\n    .pipe($.bump(options))\n    .pipe(gulp.dest(config.root));\n});\n\n/**\n * Optimize the code and re-load browserSync\n */\ngulp.task('browserSyncReload', ['optimize'], browserSync.reload);\n\n////////////////\n\n/**\n * When files change, log it\n * @param  {Object} event - event that fired\n */\nfunction changeEvent(event) {\n  var srcPattern = new RegExp('/.*(?=/' + config.source + ')/');\n  log('File ' + event.path.replace(srcPattern, '') + ' ' + event.type);\n}\n\n/**\n * Delete all files in a given path\n * @param  {Array}   path - array of paths to delete\n * @param  {Function} done - callback when complete\n */\nfunction clean(path, done) {\n  log('Cleaning: ' + $.util.colors.blue(path));\n  del(path, done);\n}\n\n/**\n * Inject files in a sorted sequence at a specified inject label\n * @param   {Array} src   glob pattern for source files\n * @param   {String} label   The label name\n * @param   {Array} order   glob pattern for sort order of the files\n * @returns {Stream}   The stream\n */\nfunction inject(src, label, order) {\n  var options = { read: false };\n  if (label) {\n    options.name = 'inject:' + label;\n  }\n\n  return $.inject(orderSrc(src, order), options);\n}\n\n/**\n * Order a stream\n * @param   {Stream} src   The gulp.src stream\n * @param   {Array} order Glob array pattern\n * @returns {Stream} The ordered stream\n */\nfunction orderSrc(src, order) {\n  //order = order || ['**/*'];\n  return gulp\n    .src(src)\n    .pipe($.if(order, $.order(order)));\n}\n\n/**\n * serve the code\n * --debug-brk or --debug\n * --nosync\n * @param  {Boolean} isDev - dev or build mode\n * @param  {Boolean} specRunner - server spec runner html\n */\nfunction serve(isDev, specRunner) {\n  var debugMode = '--debug';\n  var nodeOptions = getNodeOptions(isDev);\n\n  nodeOptions.nodeArgs = [debugMode + '=5858'];\n\n  if (args.verbose) {\n    console.log(nodeOptions);\n  }\n\n  return $.nodemon(nodeOptions)\n    .on('restart', ['vet'], function(ev) {\n      log('*** nodemon restarted');\n      log('files changed:\\n' + ev);\n      setTimeout(function() {\n        browserSync.notify('reloading now ...');\n        browserSync.reload({ stream: false });\n      }, config.browserReloadDelay);\n    })\n    .on('start', function() {\n      log('*** nodemon started');\n      startBrowserSync(isDev, specRunner);\n    })\n    .on('crash', function() {\n      log('*** nodemon crashed: script crashed for some reason');\n    })\n    .on('exit', function() {\n      log('*** nodemon exited cleanly');\n    });\n}\n\nfunction getNodeOptions(isDev) {\n  return {\n    script: config.nodeServer,\n    delayTime: 1,\n    env: {\n      'PORT': port,\n      'NODE_ENV': isDev ? 'dev' : 'build'\n    },\n    watch: [config.server]\n  };\n}\n\n//function runNodeInspector() {\n//    log('Running node-inspector.');\n//    log('Browse to http://localhost:8080/debug?port=5858');\n//    var exec = require('child_process').exec;\n//    exec('node-inspector');\n//}\n\n// /**\n//  * Start e2e tests using Protractor.\n//  * @param {function} done Callback when protractor has finished its operation.\n//  * @return {Stream}\n//  */\n// function runProtractor(done) {\n//   log('Running e2e Protractor Specs...');\n\n//   return gulp\n//     .src([config.scenarios], {read: false})\n//     .pipe($.plumber())\n//     .pipe(protractor({\n//       configFile: './protractor.config.js'\n//     }))\n//     .on('error', function() {\n//       log('Protractor Error.');\n//       done();\n//     })\n//     .on('end', function() {\n//       log('Protractor End.');\n//       done();\n//     });\n// }\n\n/**\n * Start BrowserSync\n * --nosync will avoid browserSync\n */\nfunction startBrowserSync(isDev, specRunner) {\n  if (args.nosync || browserSync.active) {\n    return;\n  }\n\n  log('Starting BrowserSync on port ' + port);\n\n  // If build: watches the files, builds, and restarts browser-sync.\n  // If dev: watches less, compiles it to css, browser-sync handles reload\n  if (isDev) {\n    gulp.watch([config.less], ['styles'])\n      .on('change', changeEvent);\n  } else {\n    gulp.watch([config.less, config.js, config.html], ['browserSyncReload'])\n      .on('change', changeEvent);\n  }\n\n  var options = {\n    proxy: 'localhost:' + port,\n    port: 3000,\n    files: isDev ? [\n      config.client + '**/*.*',\n      '!' + config.less,\n      config.temp + '**/*.css'\n    ] : [],\n    watchOptions: {\n      ignored: ['node_modules', 'bower_components']\n    },\n    ghostMode: { // these are the defaults t,f,t,t\n      clicks: true,\n      location: false,\n      forms: true,\n      scroll: true\n    },\n    injectChanges: true,\n    logFileChanges: true,\n    logLevel: 'info',\n    logPrefix: 'hottowel',\n    notify: true,\n    reloadDelay: 0 //1000\n  };\n  if (specRunner) {\n    options.startPath = config.specRunnerFile;\n  }\n\n  browserSync(options);\n}\n\n/**\n * Start Plato inspector and visualizer\n */\nfunction startPlatoVisualizer(done) {\n  log('Running Plato');\n\n  var files = glob.sync(config.plato.js);\n  var excludeFiles = /.*\\.spec\\.js/;\n  var plato = require('plato');\n\n  var options = {\n    title: 'Plato Inspections Report',\n    exclude: excludeFiles\n  };\n  var outputDir = config.report + '/plato';\n\n  plato.inspect(files, outputDir, options, platoCompleted);\n\n  function platoCompleted(report) {\n    var overview = plato.getOverviewReport(report);\n    if (args.verbose) {\n      log(overview.summary);\n    }\n    if (done) { done(); }\n  }\n}\n\n/**\n * Start the tests using karma.\n * @param  {boolean} singleRun - True means run once and end (CI), or keep running (dev)\n * @param  {Function} done - Callback to fire when karma is done\n * @return {undefined}\n */\nfunction startTests(singleRun, done) {\n  var child;\n  var excludeFiles = [];\n  var fork = require('child_process').fork;\n  var Karma = require('karma').Server;\n  var serverSpecs = config.serverIntegrationSpecs;\n  var e2eSpecs = [config.scenarios];\n  var excludeSpecs = [].concat(serverSpecs, e2eSpecs);\n\n  if (args.startServers) {\n    log('Starting servers');\n    var savedEnv = process.env;\n    savedEnv.NODE_ENV = 'dev';\n    savedEnv.PORT = 8888;\n    child = fork(config.nodeServer);\n  } else {\n    // make sure server and e2e specs are not run through karma\n    if (excludeSpecs && excludeSpecs.length) {\n      excludeFiles = excludeSpecs;\n    }\n  }\n\n  new Karma({\n    configFile: __dirname + '/karma.conf.js',\n    exclude: excludeFiles,\n    singleRun: !!singleRun\n  }, karmaCompleted).start();\n\n  ////////////////\n\n  function karmaCompleted(karmaResult) {\n    log('Karma completed');\n    if (child) {\n      log('shutting down the child process');\n      child.kill();\n    }\n    if (karmaResult === 1) {\n      done('karma: tests failed with code ' + karmaResult);\n    } else {\n      done();\n    }\n  }\n}\n\n/**\n * Formatter for bytediff to display the size changes after processing\n * @param  {Object} data - byte data\n * @return {String}      Difference in bytes, formatted\n */\nfunction bytediffFormatter(data) {\n  var difference = (data.savings > 0) ? ' smaller.' : ' larger.';\n  return data.fileName + ' went from ' +\n    (data.startSize / 1000).toFixed(2) + ' kB to ' +\n    (data.endSize / 1000).toFixed(2) + ' kB and is ' +\n    formatPercent(1 - data.percent, 2) + '%' + difference;\n}\n\n/**\n * Log an error message and emit the end of a task\n */\n//function errorLogger(error) {\n//    log('*** Start of Error ***');\n//    log(error);\n//    log('*** End of Error ***');\n//    this.emit('end');\n//}\n\n/**\n * Format a number as a percentage\n * @param  {Number} num       Number to format as a percent\n * @param  {Number} precision Precision of the decimal\n * @return {String}           Formatted perentage\n */\nfunction formatPercent(num, precision) {\n  return (num * 100).toFixed(precision);\n}\n\n/**\n * Format and return the header for files\n * @return {String}           Formatted file header\n */\nfunction getHeader() {\n  var pkg = require('./package.json');\n  var template = ['/**',\n    ' * <%%= pkg.name %> - <%%= pkg.description %>',\n    ' * @authors <%%= pkg.authors %>',\n    ' * @version v<%%= pkg.version %>',\n    ' * @link <%%= pkg.homepage %>',\n    ' * @license <%%= pkg.license %>',\n    ' */',\n    ''\n  ].join('\\n');\n  return $.header(template, {\n    pkg: pkg\n  });\n}\n\n/**\n * Log a message or series of messages using chalk's blue color.\n * Can pass in a string, object or array.\n */\nfunction log(msg) {\n  if (typeof (msg) === 'object') {\n    for (var item in msg) {\n      if (msg.hasOwnProperty(item)) {\n        $.util.log($.util.colors.blue(msg[item]));\n      }\n    }\n  } else {\n    $.util.log($.util.colors.blue(msg));\n  }\n}\n\n/**\n * Show OS level notification using node-notifier\n */\nfunction notify(options) {\n  var notifier = require('node-notifier');\n  var notifyOptions = {\n    sound: 'Bottle',\n    contentImage: path.join(__dirname, 'gulp.png'),\n    icon: path.join(__dirname, 'gulp.png')\n  };\n  _.assign(notifyOptions, options);\n  notifier.notify(notifyOptions);\n}\n\nmodule.exports = gulp;\n","/home/travis/build/npmtest/node-npmtest-generator-hottowel/node_modules/generator-hottowel/app/templates/_karma.conf.js":"module.exports = function(config) {\n  var gulpConfig = require('./gulp.config')();\n\n  config.set({\n    // base path that will be used to resolve all patterns (eg. files, exclude)\n    basePath: './',\n\n    // frameworks to use\n    // some available frameworks: https://npmjs.org/browse/keyword/karma-adapter\n    frameworks: ['mocha', 'chai', 'sinon', 'chai-sinon'],\n\n    // list of files / patterns to load in the browser\n    files: gulpConfig.karma.files,\n\n    // list of files to exclude\n    exclude: gulpConfig.karma.exclude,\n\n    proxies: {\n      '/': 'http://localhost:8888/'\n    },\n\n    // preprocess matching files before serving them to the browser\n    // available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor\n    preprocessors: gulpConfig.karma.preprocessors,\n\n    // test results reporter to use\n    // possible values: 'dots', 'progress', 'coverage'\n    // available reporters: https://npmjs.org/browse/keyword/karma-reporter\n    reporters: ['progress', 'coverage'],\n\n    coverageReporter: {\n      dir: gulpConfig.karma.coverage.dir,\n      reporters: gulpConfig.karma.coverage.reporters\n    },\n\n    // web server port\n    port: 9876,\n\n    // enable / disable colors in the output (reporters and logs)\n    colors: true,\n\n    // level of logging\n    // possible values: config.LOG_DISABLE || config.LOG_ERROR ||\n    // config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG\n    logLevel: config.LOG_INFO,\n\n    // enable / disable watching file and executing tests whenever any file changes\n    autoWatch: true,\n\n    // start these browsers\n    // available browser launchers: https://npmjs.org/browse/keyword/karma-launcher\n    //        browsers: ['Chrome', 'ChromeCanary', 'FirefoxAurora', 'Safari', 'PhantomJS'],\n    browsers: ['PhantomJS'],\n\n    // Continuous Integration mode\n    // if true, Karma captures browsers, runs the tests and exits\n    singleRun: false\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-generator-hottowel/node_modules/generator-hottowel/app/templates/_protractor.config.js":"var gulpConfig = require('./gulp.config')();\n\nexports.config = {\n  baseUrl: 'http://localhost:' + gulpConfig.defaultPort,\n  specs: gulpConfig.scenarios\n};\n"}